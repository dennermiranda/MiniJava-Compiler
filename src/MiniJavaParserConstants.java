/* Generated By:JavaCC: Do not edit this line. MiniJavaParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MiniJavaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LBRACE = 1;
  /** RegularExpression Id. */
  int PUBLIC = 2;
  /** RegularExpression Id. */
  int CLASS = 3;
  /** RegularExpression Id. */
  int STATIC = 4;
  /** RegularExpression Id. */
  int VOID = 5;
  /** RegularExpression Id. */
  int MAIN = 6;
  /** RegularExpression Id. */
  int LP = 7;
  /** RegularExpression Id. */
  int STRING = 8;
  /** RegularExpression Id. */
  int COMMA = 9;
  /** RegularExpression Id. */
  int LBRACKETS = 10;
  /** RegularExpression Id. */
  int RBRACKETS = 11;
  /** RegularExpression Id. */
  int RP = 12;
  /** RegularExpression Id. */
  int RBRACE = 13;
  /** RegularExpression Id. */
  int EXTENDS = 14;
  /** RegularExpression Id. */
  int PONTOVIRGULA = 15;
  /** RegularExpression Id. */
  int RETURN = 16;
  /** RegularExpression Id. */
  int INT = 17;
  /** RegularExpression Id. */
  int BOOLEAN = 18;
  /** RegularExpression Id. */
  int IGUAL = 19;
  /** RegularExpression Id. */
  int IF = 20;
  /** RegularExpression Id. */
  int ELSE = 21;
  /** RegularExpression Id. */
  int WHILE = 22;
  /** RegularExpression Id. */
  int PRINT = 23;
  /** RegularExpression Id. */
  int E = 24;
  /** RegularExpression Id. */
  int MENORQUE = 25;
  /** RegularExpression Id. */
  int MAIORQUE = 26;
  /** RegularExpression Id. */
  int MAIS = 27;
  /** RegularExpression Id. */
  int MENOS = 28;
  /** RegularExpression Id. */
  int VEZES = 29;
  /** RegularExpression Id. */
  int DIVIDIDO = 30;
  /** RegularExpression Id. */
  int PONTO = 31;
  /** RegularExpression Id. */
  int LENGTH = 32;
  /** RegularExpression Id. */
  int TRUE = 33;
  /** RegularExpression Id. */
  int FALSE = 34;
  /** RegularExpression Id. */
  int THIS = 35;
  /** RegularExpression Id. */
  int NEW = 36;
  /** RegularExpression Id. */
  int EXCLAMACAO = 37;
  /** RegularExpression Id. */
  int OP = 38;
  /** RegularExpression Id. */
  int DIGITO = 39;
  /** RegularExpression Id. */
  int LETRA = 40;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 41;
  /** RegularExpression Id. */
  int ID = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"{\"",
    "\"public\"",
    "\"class\"",
    "\"static\"",
    "\"void\"",
    "\"main\"",
    "\"(\"",
    "\"String\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\")\"",
    "\"}\"",
    "\"extends\"",
    "\";\"",
    "\"return\"",
    "\"int\"",
    "\"boolean\"",
    "\"=\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"System.out.println\"",
    "\"&&\"",
    "\"<\"",
    "\">\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\".\"",
    "\"length\"",
    "\"true\"",
    "\"false\"",
    "\"this\"",
    "\"new\"",
    "\"!\"",
    "<OP>",
    "<DIGITO>",
    "<LETRA>",
    "<INTEGER_LITERAL>",
    "<ID>",
    "<token of kind 43>",
    "<token of kind 44>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"\\f\"",
  };

}
